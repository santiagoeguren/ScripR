2+2
from pycaret.datasets import get_data
import numpy as np
#Pandas
import pandas as pd
import numpy as np
#Pandas
import pandas as pd
#Matematicas
import math as math
#Pyfolio
import pyfolio as pf
import pyfolio as pf
import numpy as np
#Pandas
import pyfolio as pf
#Descargar los precios
import yfinance as yf
#Graficar
import matplotlib.pyplot as plt
#pandas_datareader
import pandas_datareader as web
#dates
import matplotlib.dates as dates
import yfinance as yf
#Graficar
import matplotlib.pyplot as plt
#pandas_datareader
import pandas_datareader as web
#dates
import matplotlib.dates as dates
###############################################################################
#Descargar datos
################################################################################
#------------------------------------------------------------------------------
#Definir tickers
tickers_list = ['BEN', 'KO', 'NCLH', 'ALK', 'RL']
#-------------------------------------------------------------------------------
#Definir fechas y tipo de precio
stocks = yf.download(tickers_list,'2014-1-1','2019-1-1')['Adj Close']
#------------------------------------------------------------------------------
#Graficar
#------------------------------------------------------------------------------
# Plot all the close prices
((stocks.pct_change()+1).cumprod()).plot(figsize=(10, 7))
# Show the legend
plt.legend()
# Define the label for the title of the figure
plt.title("Returns", fontsize=16)
# Define the labels for x-axis and y-axis
plt.ylabel('Cumulative Returns', fontsize=14)
plt.xlabel('Year', fontsize=14)
# Plot the grid lines
plt.grid(which="major", color='k', linestyle='-.', linewidth=0.5)
plt.show()
#-------------------------------------------------------------------------------
#Calcular Retornos
#-------------------------------------------------------------------------------
#Estimar los rendimientos diarios
log_ret=np.log(stocks/stocks.shift(1))
################################################################################
#Armar Cartera
################################################################################
#-------------------------------------------------------------------------------
#Cargar pesos
pesos_m=[1/5,1/5,1/5,1/5,1/5]
#-------------------------------------------------------------------------------
#Estimar rendimiento cartera
rendimiento_cartera = pd.Series(np.dot(pesos_m, log_ret.T), index=log_ret.index)
#-------------------------------------------------------------------------------
#Imprimir sumario
pf.create_simple_tear_sheet(rendimiento_cartera)
from pycaret.datasets import get_data
dataset = get_data('diamond')
data = dataset.sample(frac=0.001, random_state=786).reset_index(drop=True)
data = dataset.sample(frac=0.002, random_state=786).reset_index(drop=True)
data_unseen = dataset.drop(data.index).reset_index(drop=True)
print('Data for Modeling: ' + str(data.shape))
print('Unseen Data For Predictions: ' + str(data_unseen.shape))
from pycaret.regression import *
exp_reg101 = setup(data = data, target = 'Price',fold_shuffle=False)
from pycaret.datasets import get_data
dataset = get_data('diamond')
clf1 = setup(data = data, target = 'Price',train_size = 0.7, session_id = 2, fold_shuffle=False)
from pycaret.datasets import get_data
dataset = get_data('diamond')
clf1 = setup(data = dataset, target = 'Price',train_size = 0.7, session_id = 2, fold_shuffle=False)
from pycaret.datasets import get_data
dataset = get_data('diamond')
clf1 = setup(data = dataset, target = 'Price',train_size = 0.7, session_id = 2, fold_shuffle=False)
from pycaret.datasets import get_data
dataset = get_data('diamond')
data = dataset.sample(frac=0.002, random_state=786).reset_index(drop=True)
data_unseen = dataset.drop(data.index).reset_index(drop=True)
print('Data for Modeling: ' + str(data.shape))
print('Unseen Data For Predictions: ' + str(data_unseen.shape))
exp_reg101 = setup(data = data, target = 'Price',shuffle=False)
clf1 = setup(data = data, target = 'Price', train_size = 0.7, data_split_shuffle=True, session_id = 2)
clf1 = setup(data = data, target = 'Price', train_size = 0.7, data_split_shuffle=True, session_id = 5)
clf1 = setup(data = dataset, target = 'Price', train_size = 0.7, data_split_shuffle=True, session_id = 5)
from pycaret.datasets import get_data
dataset = get_data('credit')
# check the shape of data
dataset.shape
# sample 5% of data to be used as unseen data
data = dataset.sample(frac=0.95, random_state=786)
data_unseen = dataset.drop(data.index)
data.reset_index(inplace=True, drop=True)
data_unseen.reset_index(inplace=True, drop=True)
# print the revised shape
print('Data for Modeling: ' + str(data.shape))
print('Unseen Data For Predictions: ' + str(data_unseen.shape))
exp_clf101 = setup(data = df, target = 'Survived', fold_shuffle=True, session_id=2)
exp_clf101 = setup(data = data, target = 'Survived', fold_shuffle=True, session_id=2)
exp_clf101 = setup(data = data, target = 'Survived', fold_shuffle=True)
exp_clf101 = setup(data = data, target = 'Survived', fold_shuffle=True,, session_id=123)
exp_clf101 = setup(data = data, target = 'Survived', fold_shuffle=True,session_id=123)
exp_clf101 = setup(data = data, target = 'LIMIT_BAL', fold_shuffle=True,session_id=123)
exp_clf101 = setup(data = data, target = 'LIMIT_BAL', fold_shuffle=False,session_id=123)
s = setup(data = data, target = 'default')
from pycaret.datasets import get_data
dataset = get_data('diamond')
data = dataset.sample(frac=0.002, random_state=786).reset_index(drop=True)
data_unseen = dataset.drop(data.index).reset_index(drop=True)
print('Data for Modeling: ' + str(data.shape))
print('Unseen Data For Predictions: ' + str(data_unseen.shape))
clf1 = setup(data = dataset, target = 'Price', train_size = 0.7, data_split_shuffle=True, session_id = 5)
clf1 = setup(data = dataset, target = 'Price',train_size = 0.7, session_id = 2, shuffle=True)
setup()?
setup?
View(setup)
View(setup)
setup()
setup(data = dataset, target = 'Price')
data = dataset.sample(frac=0.002, random_state=786).reset_index(drop=True)
data_unseen = dataset.drop(data.index).reset_index(drop=True)
print('Data for Modeling: ' + str(data.shape))
print('Unseen Data For Predictions: ' + str(data_unseen.shape))
from pycaret.regression import *
data = dataset.sample(frac=0.002, random_state=786,,shuffle=False).reset_index(drop=True)
data = dataset.sample(frac=0.002, random_state=786,shuffle=False).reset_index(drop=True)
from pycaret.datasets import get_data
data = get_data('iris')
from pycaret.classification import *
s = setup(data, target = 'species', session_id = 123)
lr = create_model('lr')# generate dashboard
dashboard(lr)
s = setup(data, target = 'species', session_id = 123)
lr = create_model('lr')# generate dashboard
dashboard(lr)
eda()
setup(data = dataset, target = 'Price')
# load dataset
from pycaret.datasets import get_data
data = get_data('iris')
# init setup
from pycaret.classification import *
s = setup(data, target = 'species', session_id = 123)
import numpy as np
from sklearn.model_selection import KFold
X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])
y = np.array([1, 2, 3, 4])
kf = KFold(n_splits=2,shuffle=True)
kf.get_n_splits(X)
from pycaret.datasets import get_data
dataset = get_data('credit')
# check the shape of data
dataset.shape
# sample 5% of data to be used as unseen data
data = dataset.sample(frac=0.95, random_state=786)
data_unseen = dataset.drop(data.index)
data.reset_index(inplace=True, drop=True)
data_unseen.reset_index(inplace=True, drop=True)
# print the revised shape
print('Data for Modeling: ' + str(data.shape))
print('Unseen Data For Predictions: ' + str(data_unseen.shape))
from pycaret.classification import *
exp_clf101 = setup(data = data, target = 'LIMIT_BAL', fold_shuffle=False,session_id=123)
s = setup(data = data, target = 'default')
best_model = compare_models(s)
dt = create_model('dt')
from pycaret.datasets import get_data
dataset = get_data('diamond')
data = dataset.sample(frac=0.002, random_state=786).reset_index(drop=True)
data_unseen = dataset.drop(data.index).reset_index(drop=True)
print('Data for Modeling: ' + str(data.shape))
print('Unseen Data For Predictions: ' + str(data_unseen.shape))
from pycaret.regression import *
exp_reg101 = setup(data = data, target = 'Price')
clf1 = setup(data = dataset, target = 'Price',train_size = 0.7, session_id = 2, shuffle=True)
clf1 = setup(data = dataset, target = 'Price', train_size = 0.7, data_split_shuffle=True, session_id = 5)
setup(data = dataset, target = 'Price')
# load dataset
from pycaret.datasets import get_data
data = get_data('iris')
# init setup
from pycaret.classification import *
s = setup(data, target = 'species', session_id = 123)
# train model
lr = create_model('lr')# generate dashboard
clf1 = setup(data = dataset, target = 'Price', train_size = 0.7, data_split_shuffle=False, session_id = 5)
s = setup(data, target = 'species', session_id = 1,fold_shuffle=True)
s = setup(data, target = 'species', session_id = 1,fold_shuffle=True)
# train model
lr = create_model('lr')# generate dashboard
dashboard(lr)
s = setup(data, target = 'species', session_id = 1,fold_shuffle=True)
# train model
