x=[1,2]
y=2
y=2
x+y
R=1
R=1
Phy=1
R+Phy
import pandas as pd
df=pd.DataFrame([[1,2,3],[5,6,7]])
print(df)
from sklearn import linear_model
linreg_python = linear_model.LinearRegression()
df=pd.DataFrame([[1,2,3],[5,6,7]])
print(df)
linreg_python = linear_model.LinearRegression()
linreg_python$fit(X = mtcars[,-1], y = mtcars$mpg)
data.frame(var = c("Intercept", names(mtcars)[-1]),
quit
data.frame(var = c("Intercept", names(mtcars)[-1]),
python_coef = c(linreg_python$intercept_, linreg_python$coef_))
import pandas as pd
#Modelo lineal
from sklearn import linear_model
#########################################################################
#Crear un array
#########################################################################
df=pd.DataFrame([[1,2,3],[5,6,7]])
print(df)
#########################################################################
#Crear la funcion lineal
#########################################################################
linreg_python = linear_model.LinearRegression()
import pandas as pd
#Modelo lineal
from sklearn import linear_model
#########################################################################
#Crear un array
#########################################################################
df=pd.DataFrame([[1,2,3],[5,6,7]])
print(df)
#########################################################################
#Crear la funcion lineal
#########################################################################
linreg_python = linear_model.LinearRegression()
source_python("Usar_Phyton.R")
import pandas as pd
#Numpy
import numpy as np
#Pandas
import pandas as pd
#Matematicas
import pyfolio as pf
pip install pyfolio
conda install pyfolio
miniconda install pyfolio
r["mtcars"]
r["x"]
y=r["x"]
print(y)
r["mean"]
y=r["mean"]
y[2]
[2,3].y
[2,3].y()
y=r["mean()"]
y=r["mean(c(2,2))"]
x="mean(c(2,2))"
y[x]
r[x]
python -m pip install pandas
pip install pandas
import numpy as np
#Pandas
import pandas as pd
#Matematicas
import math as math
miniconda install pyfolio
import pyfolio as pf
conda install pyfolio
import pyfolio as pf
import pyfolio as pf
import numpy as np
#Pandas
import pandas as pd
#Matematicas
import math as math
#Pyfolio
import pyfolio as pf
import yfinance as yf
import yfinance as yf
tickers_list = ['BEN', 'PBCT', 'NCLH', 'ALK', 'RL']
stocks = yf.download(tickers_list,'2014-1-1','2019-1-1')['Adj Close']
tickers_list = ['BEN', 'KO', 'NCLH', 'ALK', 'RL']
#-------------------------------------------------------------------------------
#Definir fechas y tipo de precio
stocks = yf.download(tickers_list,'2014-1-1','2019-1-1')['Adj Close']
((stocks.pct_change()+1).cumprod()).plot(figsize=(10, 7))
((stocks.pct_change()+1).cumprod()).plot(figsize=(10, 7))
# Show the legend
plt.legend()
import matplotlib.pyplot as plt
((stocks.pct_change()+1).cumprod()).plot(figsize=(10, 7))
# Show the legend
plt.legend()
# Define the label for the title of the figure
plt.title("Returns", fontsize=16)
# Define the labels for x-axis and y-axis
plt.ylabel('Cumulative Returns', fontsize=14)
plt.xlabel('Year', fontsize=14)
# Plot the grid lines
plt.grid(which="major", color='k', linestyle='-.', linewidth=0.5)
plt.show()
pesos_m=[1/5,1/5,1/5,1/5,1/5]
rendimiento_cartera = pd.Series(np.dot(pesos_m, log_ret_test.T), index=log_ret_test.index)
log_ret=np.log(stocks/stocks.shift(1))
rendimiento_cartera = pd.Series(np.dot(pesos_m, log_ret.T), index=log_ret_test.index)
rendimiento_cartera = pd.Series(np.dot(pesos_m, log_ret.T), index=log_ret.index)
pf.create_simple_tear_sheet(rendimiento_cartera)
import pandas_datareader as web
import pandas_datareader as web
pf.create_simple_tear_sheet(rendimiento_cartera)
rendimiento_cartera = pd.Series(np.dot(pesos_m, log_ret.T), index=log_ret.index)
#-------------------------------------------------------------------------------
#Imprimir sumario
pf.create_simple_tear_sheet(rendimiento_cartera)
import matplotlib.dates as dates
pf.create_simple_tear_sheet(rendimiento_cartera)
import pyfolio as pf
pf.create_simple_tear_sheet(rendimiento_cartera)
pf.create_returns_tear_sheet(rendimiento_cartera)
stock_rets = pf.utils.get_symbol_rets('FB')
stock_rets.head()
stock_rets = pf.utils.get_symbol_rets('FB')
pf.create_returns_tear_sheet(rendimiento_cartera)
pf.create_simple_tear_sheet(rendimiento_cartera)
pf.plot_drawdown_periods(rendimiento_cartera, top=5)
import numpy as np
import pandas as pd
import math as math
import matplotlib.dates as dates
import matplotlib.dates as dates
import matplotlib.pyplot as plt
import pandas_datareader as web
import pyfolio as pf
import yfinance as yf
from pypfopt import risk_models
pf.create_simple_tear_sheet(rendimiento_cartera)
import numpy as np
#Pandas
import pandas as pd
#Matematicas
import math as math
#Pyfolio
import pyfolio as pf
#Descargar los precios
import yfinance as yf
#Graficar
import matplotlib.pyplot as plt
#pandas_datareader
import pandas_datareader as web
#dates
import matplotlib.dates as dates
###############################################################################
#Descargar datos
################################################################################
#------------------------------------------------------------------------------
#Definir tickers
tickers_list = ['BEN', 'KO', 'NCLH', 'ALK', 'RL']
#-------------------------------------------------------------------------------
#Definir fechas y tipo de precio
stocks = yf.download(tickers_list,'2014-1-1','2019-1-1')['Adj Close']
#------------------------------------------------------------------------------
#Graficar
#------------------------------------------------------------------------------
# Plot all the close prices
((stocks.pct_change()+1).cumprod()).plot(figsize=(10, 7))
# Show the legend
plt.legend()
# Define the label for the title of the figure
plt.title("Returns", fontsize=16)
# Define the labels for x-axis and y-axis
plt.ylabel('Cumulative Returns', fontsize=14)
plt.xlabel('Year', fontsize=14)
# Plot the grid lines
plt.grid(which="major", color='k', linestyle='-.', linewidth=0.5)
plt.show()
#-------------------------------------------------------------------------------
#Calcular Retornos
#-------------------------------------------------------------------------------
#Estimar los rendimientos diarios
log_ret=np.log(stocks/stocks.shift(1))
################################################################################
#Armar Cartera
################################################################################
#-------------------------------------------------------------------------------
#Cargar pesos
pesos_m=[1/5,1/5,1/5,1/5,1/5]
#-------------------------------------------------------------------------------
#Estimar rendimiento cartera
rendimiento_cartera = pd.Series(np.dot(pesos_m, log_ret.T), index=log_ret.index)
#-------------------------------------------------------------------------------
#Imprimir sumario
pf.create_simple_tear_sheet(rendimiento_cartera)
stock_rets = pf.utils.get_symbol_rets('AAPL')
Import pandas_datareader as pdr
import pandas_datareader as pdr
From pandas_datareader import *
from pandas_datareader import *
pf.create_simple_tear_sheet(rendimiento_cartera)
import pandas_datareader as pdr
from pandas_datareader import *
pf.create_simple_tear_sheet(rendimiento_cartera)
from pandas_datareader import data as web
pf.create_simple_tear_sheet(rendimiento_cartera)
pf.create_simple_tear_sheet(rendimiento_cartera)
pf.create_simple_tear_sheet([0,0.10,0.02,0.02,0.03])
pf.create_risk_tear_sheet(rendimiento_cartera)
pf.create_risk_tear_sheet([0,0.10,0.02,0.02,0.03])
pf.create_bayesian_tear_sheet(rendimiento_cartera)
pf.create_full_tear_sheet(rendimiento_cartera)
pf.plot_capacity_sweep(rendimiento_cartera)
pf.plot_perf_stats(rendimiento_cartera)
pf.plot_rolling_returns(rendimiento_cartera)
stock_rets = pf.utils.get_symbol_rets('AAPL')
pesos_m=[1/5,1/5,1/5,1/5,1/5]
#-------------------------------------------------------------------------------
#Estimar rendimiento cartera
rendimiento_cartera = pd.Series(np.dot(pesos_m, log_ret.T), index=log_ret.index)
#-------------------------------------------------------------------------------
#Imprimir sumario
pf.create_simple_tear_sheet(rendimiento_cartera)
import warnings
export PYTHONWARNINGS="ignore"
warnings.simplefilter('ignore')
rendimiento_cartera = pd.Series(np.dot(pesos_m, log_ret.T), index=log_ret.index)
#-------------------------------------------------------------------------------
#Imprimir sumario
pf.create_simple_tear_sheet(rendimiento_cartera)
pf.create_simple_tear_sheet(rendimiento_cartera)
from pycaret.datasets import get_data
dataset = get_data('credit')
dataset.shape>>> (24000, 24)
dataset.shape
data = dataset.sample(frac=0.95, random_state=786)
data_unseen = dataset.drop(data.index)
data.reset_index(inplace=True, drop=True)
data_unseen.reset_index(inplace=True, drop=True)
print('Data for Modeling: ' + str(data.shape))
print('Unseen Data For Predictions: ' + str(data_unseen.shape))
from pycaret.classification import *
from pycaret.classification import *
s = setup(data = data, target = 'default', session_id=123)
from pycaret.classification import *
from pycaret.regression import *
from pycaret.classification import *
s = setup(data = data, target = 'default', session_id=123)
s = setup(data = data, target = 'default', session_id=123)
best_model = compare_models()
dt = create_model('dt')
dt = create_model('dt')
2
dataset.shape
# sample 5% of data to be used as unseen data
data = dataset.sample(frac=0.95, random_state=786)
data_unseen = dataset.drop(data.index)
data.reset_index(inplace=True, drop=True)
data_unseen.reset_index(inplace=True, drop=True)
# print the revised shape
print('Data for Modeling: ' + str(data.shape))
print('Unseen Data For Predictions: ' + str(data_unseen.shape))
from pycaret.classification import *
best_model = compare_models(s)
s = setup(data = data, target = 'default', session_id=123)
s = setup(data = data, target = 'default')
s = setup(data = data, target = 'default', shuffle=True)
s = setup(data = data, target = 'default)
s = setup(data = data, target = 'default")
s = setup(data = data, target = 'default')
data = dataset.sample(frac=0.95, random_state=786)
data_unseen = dataset.drop(data.index)
data.reset_index(inplace=True, drop=True)
data_unseen.reset_index(inplace=True, drop=True)
# print the revised shape
print('Data for Modeling: ' + str(data.shape))
print('Unseen Data For Predictions: ' + str(data_unseen.shape))
from pycaret.classification import *
s = setup(data = data, target = 'default')
from pycaret.datasets import get_data
dataset = get_data('diamond')
data = dataset.sample(frac=0.9, random_state=786).reset_index(drop=True)
data_unseen = dataset.drop(data.index).reset_index(drop=True)
print('Data for Modeling: ' + str(data.shape))
print('Unseen Data For Predictions: ' + str(data_unseen.shape))
from pycaret.regression import *
exp_reg101 = setup(data = data, target = 'Price', session_id=123)
clf1 = setup(data = data, target = 'Price',train_size = 0.7, session_id = 2)
clf1 = setup(data = data, target = 'Price',train_size = 0.7, session_id = 2, fold_shuffle=True)
clf1 = setup(data = data, target = 'Price',train_size = 0.7, session_id = 2, fold_shuffle=True)
exp_reg101 = setup(data = data, target = 'Price', session_id=123,fold_shuffle=True)
exp_reg101 = setup(data = data, target = 'Price', session_id=123,fold_shuffle=False)
exp_reg101 = setup(data = data, target = 'Price', session_id=123,fold_shuffle=False)
from pycaret.datasets import get_data
dataset = get_data('diamond')
data = dataset.sample(frac=0.01, random_state=786).reset_index(drop=True)
data = dataset.sample(frac=0.001, random_state=786).reset_index(drop=True)
exp_reg101 = setup(data = data, target = 'Price', session_id=123,fold_shuffle=True)
exp_reg101 = setup(data = data, target = 'Price',fold_shuffle=True)
